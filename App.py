__author__ = 'nikhil'
#!flask/bin/python
#from bottle import Flask

from bottle import request,route,static_file,run
import data_consolidation as dc
import solution as randomForestRun
import shutil

import os
import gzip
import csv
import pymysql
import json

project_path = '/home/voldy/PycharmProjects/MalwareClassify/'

@route('/uploads', method='POST')
def results():

    deleteFiles()

    category = request.forms.get('category')
    upload = request.files.get('upload')
    print upload

    save_path = project_path+"data/consolidate_op/test/".format(category=category)
    if not os.path.exists(save_path):
        os.makedirs(save_path)

    file_path = "{path}/{file}".format(path=save_path,file=upload.filename)

    # Save file to local system
    upload.save(file_path)

    if not upload.filename.endswith(".bytes"):
        in_file = open(file_path, "rb") # opening for [r]eading as [b]inary
        data = in_file.read() # if you only wanted to read 512 bytes, do .read(512)
        in_file.close()

        out_file = open(file_path+".bytes", "wb") # open for [w]riting as [b]inary

        out_file.write(data)
        out_file.close()
    #Read file
    inF = file(file_path, 'rb')
    s = inF.read()
    inF.close()

    #Write it in .gz format for further processing
    outF = gzip.GzipFile(file_path+".gz", 'wb')
    outF.write(s)
    outF.close()


    print "File upload success"

    # Consolidate the .gz file to create test and train data
    print save_path
    dc.consolidate(save_path)

    #Run the random Forest
    randomForestRun.randomForest()


    #Database Conenction string
    connection = pymysql.connect("dbinstance-sjsu-amogh.cyht8ykut6xk.us-west-1.rds.amazonaws.com","voldy","voldysjsu","malwareClassify")
    jsonfile = open('C:/Users/SCS_USER/Desktop/file.json', 'w')
    cursor = connection.cursor()


    csv_data = csv.reader(file('C:\Users\SCS_USER\Desktop\submission.csv'))
    f = open( 'C:\Users\SCS_USER\Desktop\submission.csv', 'rU' )
    innerLoopCounter,outLoopCounter=0
    out=""
    for row in csv_data:
        print row[1]
        if outLoopCounter==0:
            print "hi"
            outLoopCounter+=1
        else:
            print "In else"
            str ='%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', [row]
            fieldnames = ("Id", "Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9","user_id")
            reader = csv.DictReader( f, fieldnames)
            #Writing JSON
            for newRow in reader:
                if innerLoopCounter==1:
                    print newRow
                    out = json.dumps(newRow)
                innerLoopCounter+=1
            #print 'INSERT INTO `Prediction` VALUES ( %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', [row]
            f = open( 'C:/Users/SCS_USER/Desktop/file.json', 'w')
            try:
                f.write(out)
            except RuntimeError:
                print RuntimeError.message
                #Writing to Database
            cursor.execute("INSERT INTO Prediction( \
    Id, Prediction1,Prediction2,Prediction3,Prediction4,Prediction5,Prediction6,Prediction7,Prediction8,Prediction9,user_id) VALUES ( '{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}','{7}','{8}','{9}','{10}')".format(row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],"user_id"))
    #close the connection to the database.

    connection.commit()
    cursor.close()

    return "Check output directory for csv"


def deleteFiles():
    #Remove output and test folder
    #shutil.rmtree(project_path+'data/consolidate_op/test')
    #shutil.rmtree(project_path+'data/output')



    shutil.rmtree(os.path.join(project_path,'data/consolidate_op/test'))
    shutil.rmtree(os.path.join(project_path,'data/output'))
    #Re create them
    #os.makedirs(project_path+'data/consolidate_op/test')
    #os.makedirs(project_path+'data/output')


    os.makedirs(os.path.join(project_path,'data/consolidate_op/test'))
    os.makedirs(os.path.join(project_path,'data/output'))


if __name__ == '__main__':
    run(host='localhost',port =8080)
